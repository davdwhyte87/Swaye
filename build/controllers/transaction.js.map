{"version":3,"sources":["../../controllers/transaction.js"],"names":["Transaction","require","exports","uconfirm","req","res","user_id","userData","userId","update","_id","body","trans_id","user","$set","uconfirmed","then","trans","status","json","code","message","catch","console","log","error","aconfirm","params","aconfirmed","find","exec","data","atrans"],"mappings":"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","file":"transaction.js","sourcesContent":["const Transaction=require('../models/Transaction')\r\n\r\n\r\nexports.uconfirm=(req,res)=>{\r\n    //this function takes the user id from the userData\r\n    var user_id=req.userData.userId\r\n    Transaction.update({_id:req.body.trans_id,user:user_id},{$set:{uconfirmed:true}}).then(trans=>{\r\n        if(trans){\r\n            return res.status(200).json({code:1,message:\"You have confirmed your transaction\"})\r\n        }\r\n        else{\r\n            return res.status(200).json({code:0,message:\"This transaction does not exist\"})\r\n        }\r\n    })\r\n    .catch(error=>{\r\n        console.log(error)\r\n        return res.status(200).json({code:0,error:error,message:\"An error occurred\"})\r\n    })\r\n}\r\n\r\nexports.aconfirm=(req,res)=>{\r\n    Transaction.update({_id:req.params.trans_id},{$set:{aconfirmed:true}}).then(trans=>{\r\n        if(trans){\r\n            return res.status(200).json({code:1,message:\"Transaction confirmed\"})\r\n        }\r\n        else{\r\n            return res.status(200).json({code:0,message:\"This transaction does not exist\"})\r\n        }\r\n    })\r\n    .catch(error=>{\r\n        console.log(error)\r\n        return res.status(200).json({code:0,error:error,message:\"An error occurred\"})\r\n    })\r\n}\r\n\r\n//this gets the transactions belonging to a user\r\nexports.trans=(req,res)=>{\r\n    var user_id=req.userData.userId\r\n    Transaction.find({user:user_id}).exec()\r\n    .then(trans=>{\r\n        return res.status(200).json({code:1,data:trans})\r\n    })\r\n    .catch(error=>{\r\n        return res.status(500).json({code:1,message:\"An error occurred\",error:error})\r\n    })\r\n}\r\n\r\n//this gets all the transactions on the platform\r\nexports.atrans=(req,res)=>{\r\n    Transaction.find().exec()\r\n    .then(trans=>{\r\n        return res.status(200).json({code:1,data:trans})\r\n    })\r\n    .catch(error=>{\r\n        return res.status(500).json({code:1,message:\"An error occurred\",error:error})\r\n    }) \r\n}\r\n"]}